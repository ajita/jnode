var jnodeFolder=__dirname+'/';
var cwd=process.cwd()+'/'
require('./setup.js');

var japi=function(req,res)
{
    return function(data)
    {
        switch(req.query.ret)
        {
            case 'json':
                res.setHeader('Content-Type', 'application/json');
                res.end(JSON.stringify(data), 'utf8');
            break;
            case 'jsonp':
                res.setHeader('Content-type', 'text/javascript');
                res.end(res.query.callback+'('+JSON.stringify(data)+')', 
                'utf8');
            break;
            default:
                var accepts=req.headers.accept.split(',');
                for(var i=0;i<accepts.length; i++)
                {
                    switch(accepts[i])
                    {
                        case 'text/javascript':
                        case 'application/jsonp':
                        case 'applicaiton/x-javascript':
                        case 'text/x-jsonp':
                            res.setHeader('Content-type', 
                            'text/javascript');
                            res.end(req.query.callback+'('+JSON.stringify(data)+')', 'utf8');
                            break;
                        case 'application/json':
                        case 'text/x-json':
                            res.setHeader('Content-type', 
                            'application/json');
                            res.end(JSON.stringify(data), 'utf8');
                        break;
                    }
                }
        }
    }
}

var wrapper=function wrapper(req, res, next){
    $.extend(req, $('url').parse(req.url, true));
    res.send=japi(req,res);
	console.log(req.url);
    next();
}

process.env.DEBUG='connect:dispatcher';

/* setup connect */
var connect=$('connect');
var app=connect();
app.use(connect.logger('dev'));
$.extend($, app);

/* setup router */
var router=$('router')();
$.extend($, router);

$.get('/', '/index.html');

$.extend($, {ajax:$('http').request});

rootjQuery.ready=$.ready;
exports.run=function(host, port){
	if(typeof(server)!='undefined')
		return console.log('server already running');
	global.server=$('http').createServer(app);
	server.on('clientError', function(e){ console.log(e.message);});
	server.on('connection', function(socket){ socket.on('error', function(e){ console.log(e.message); }); });

	server.on('error', function(e) {
		console.log('problem with request: ' + e.message);
	});
	server.listen(port, host);
	console.log('Server running at http://'+host+':'+port+'/');
}
exports.init=function(config)
{
	for(var route in config.routes)
	{
		$.get(route, config.routes[route]);
	}
	for(var staticFolder in config["static"])
	{
		$.use(config["static"][staticFolder], connect.static(cwd+staticFolder));
		console.log('registered static handler for '+cwd+staticFolder+' at '+config["static"][staticFolder]);
	}
	app.use(wrapper);
	app.use(router);
	exports.run(config.host, config.port);
}

var jnodeConfig=cwd+'jnode.config';
if($('fs').existsSync(jnodeConfig))
{
	var config=JSON.parse($('fs').readFileSync(jnodeConfig));
	for(var key in config)
	{
		console.log('initializing '+key);
		if(key.substring(0,2)!='./')
			context={request:{url:{pathname:key}}};
		else
			context={request:{url:{pathname:key.substring(1)}}};
			
		var init;
		if(key=='jnode')
			init=exports.init;
		else
			init=$(key).init;
		if(init)
			init(config[key]);
		console.log('initialized '+key);
	}
	context=null;
}

if(require.main===module)
{
	exports.run('192.168.68.11',81);
}
