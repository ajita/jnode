window={};
require('vm').runInThisContext(require('fs').readFileSync('jquery-core.js'), 'jquery-core.js');
global.$=jQuery

var originalInit=$.fn.init;

$.extend($.fn,{init:function(moduleName){
	if(typeof(moduleName)==='string')
		return $[moduleName] || ($[moduleName]=require(moduleName));
	return originalInit.apply(null,arguments);
},
on:function(event, handler){
	this.each(function(){ this.on(event,handler) });
}
});
var routes={};
String.prototype.endsWith=function(s)
{
	return this.substring(this.length-s.length)==s;
};
var japi=function(req,res){
	return function(data){
		switch(req.url.query.ret)
		{
			case 'json':
				res.setHeader('Content-type', 'application/json');
				res.end(JSON.stringify(data), 'utf8');
			case 'jsonp':
				res.setHeader('Content-type', 'application/json');
				res.end(req.url.query.callback+'('+JSON.stringify(data)+')', 'utf8');
			case undefined:
				accepts=req.headers.accept.split(',');
				for(var i=0; i<accepts.length; i++)
				{
					switch(accepts[i])
					{
						case 'text/javascript':
						case 'application/json':
						case 'application/x-javascript':
						case 'text/x-javascript':
						case 'text/x-json':
							res.setHeader('Content-type', accepts[i]);
							res.end(JSON.stringify(data), 'utf8');
							return;
						case 'application/jsonp':
						case 'text/x-jsonp':
							res.setHeader('Content-type', accepts[i]);
							res.end(req.url.query.callback+'('+JSON.stringify(data)+')', 'utf8');
							return;
					}
				}
				if(typeof(data)!='string')
					res.end(JSON.stringify(data));
				else
					res.end(data);

				break;
			default:
				res.end(data);
				break;
		}
	};
}
$.extend($, {handle:function(req,res, secondTime)
{
	global.context={request:req, response:res};
	req.url=$('url').parse(req.url, true);
	var handler=routes[req.url.pathname];
	if(handler)
		return handler(req,res,japi(req,res));

	var filePath='.'+req.url.pathname;
	if(!filePath.endsWith('.jnode'))
	{
		$('fs').readFile(filePath, function(err, data){
			if(err)
			{
				console.log(err);
				res.writeHead(500, {'Content-Type':'text/plain'});
				res.end(JSON.stringify(err));
			}
			res.writeHead(200);
			res.end(data);
		});
	}
	else if(!secondTime && $('fs').existsSync(filePath))
		{
			var handler=$(filePath);
			if(handler.handle)
				$(handler.handle);
			$.handle(req,res,true);
		}
		else
		{
			res.writeHead(404, {'Content-Type':'text/plain'});
			res.end('Oops, Page not found\n'+filePath);
		}
},
ready:function(handler){
	routes[context.request.url.pathname]=handler;
},
ajax:$('http').request,

});

rootjQuery.ready=$.ready;
var server;
exports.run=function(host, port){
	if(typeof(server)!='undefined')
		return console.log('server already running');
	global.server=server=$('http').createServer();
	server.on('request', $.handle);
	server.listen(port, host);
	server.on('clientError', function(e){ console.log(e.message);});
	server.on('connection', function(socket){ socket.on('error', function(e){ console.log(e.message); }); });

	server.on('error', function(e) {
		console.log('problem with request: ' + e.message);
	});
	console.log('Server running at http://'+host+':'+port+'/');
}

exports.init=function(config)
{
	exports.run(config.host, config.port);
}

if($('fs').existsSync('jnode.jconfig'))
{
	var config=JSON.parse($('fs').readFileSync('jnode.jconfig'));
	for(var key in config)
	{
		console.log('initializing '+key);
		if(key.substring(0,2)!='./')
			context={request:{url:{pathname:key}}};
		else
			context={request:{url:{pathname:key.substring(1)}}};
			
		var init=$(key).init;
		if(init)
			init(config[key]);
		console.log('initialized '+key);
	}
	context=null;
}

if(require.main===module)
{
	exports.run('192.168.68.11',81);
}